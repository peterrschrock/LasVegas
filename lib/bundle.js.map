{"version":3,"sources":["webpack:///webpack/bootstrap 8a1390ab229ba02e5d15","webpack:///./lib/las_vegas.js","webpack:///./lib/game.js","webpack:///./lib/board.js","webpack:///./lib/casino.js","webpack:///./lib/bill.js","webpack:///./lib/player.js","webpack:///./lib/dice.js","webpack:///./lib/die.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,EAAC;;AAED;AACA;AACA,EAAC;;AAED;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA,EAAC;;;;;;;ACnCD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;;AAEP;AACA;AACA,QAAO;;AAEP;AACA;AACA,QAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAW;AACX;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,QAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,QAAO;;AAEP,MAAK;AACL;AACA;AACA;AACA,QAAO;AACP;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA,MAAK;AACL;AACA;AACA,MAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,QAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA,QAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL,4BAA2B,+BAA+B,aAAa,qCAAqC;AAC5G,MAAK;AACL,4BAA2B,+BAA+B,cAAc,qCAAqC;AAC7G;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAgB,OAAO;AACvB;AACA;AACA;AACA;;AAEA;AACA,iBAAgB,KAAK;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAgB,mBAAmB;AACnC;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,+BAA8B,OAAO;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;ACnUA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;ACrBA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAW;AACX;AACA;AACA;AACA;AACA;AACA,YAAW;AACX;AACA,YAAW;AACX;AACA;AACA;AACA;AACA;AACA,YAAW;AACX;AACA;AACA;AACA;AACA;AACA,YAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;;AAEA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAgC,sBAAsB;;;AAGtD;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;;AAEA;;;;;;;AC1FA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAsB,6BAA6B;;;AAGnD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAuB,mBAAmB;AAC1C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACvDA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;AACA,qBAAoB,UAAU;AAC9B,sBAAqB,gBAAgB;;AAErC;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;;;;AAIA;;AAEA;;;;;;;AC1IA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,mBAAmB;AACtC;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;AC7EA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"./lib/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 8a1390ab229ba02e5d15","let Game = require(\"./game\");\nlet Board = require(\"./board\");\nwindow.playing = false;\n\nconst startGame = function(numPlayers = 5){\n  let canvasEl = document.getElementsByTagName(\"canvas\")[0];\n  canvasEl.width = Game.WIDTH;\n  canvasEl.height = Game.HEIGHT;\n\n  let ctx = canvasEl.getContext(\"2d\");\n  let game = new Game(numPlayers, ctx);\n  new Board(game, ctx).start();\n};\n\ndocument.addEventListener(\"DOMContentLoaded\", startGame());\n\ndocument.getElementById(\"github\").addEventListener(\"click\", function(){\n  window.open('https://github.com/peterrschrock','_blank');\n});\n\ndocument.getElementById(\"linked-in\").addEventListener(\"click\", function(){\n  window.open('https://www.linkedin.com/in/peter-schrock-67a96aa9','_blank');\n});\n\ndocument.getElementById(\"about-game\").addEventListener(\"click\", function(){\n  window.playing = false;\n});\n\ndocument.getElementById(\"view-game\").addEventListener(\"click\", function(){\n  window.playing = true;\n  // startGame();\n});\n\ndocument.getElementById(\"new-game\").addEventListener(\"click\", function(){\n  startGame();\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/las_vegas.js\n// module id = 0\n// module chunks = 0","const Casino = require(\"./casino\");\nconst Bill = require(\"./bill\");\nconst Player = require(\"./player\");\n\nclass Game {\n  constructor(numPlayers, ctx) {\n    // let players\n    this.numPlayers = numPlayers;\n    this.ctx = ctx;\n    this.casinos = [];\n    this.money = [];\n    this.players = [];\n    this.rolling = false;\n    this.sorted = false;\n    this.showing = false;\n    this.winner = false;\n    this.winOpacity = 0.00;\n\n    this.colorNums = [0, 1, 2, 3, 4, 5];\n    this.colorNums = this.shuffle(this.colorNums).slice(0, this.numPlayers);\n\n    this.buildCasinos();\n    this.dealMoney();\n    this.populatePlayers();\n\n    this.turn = Math.floor(Math.random() * this.players.length);\n\n    this.draw();\n\n    this.play();\n  }\n\n  gameOver(){\n    let diceLeftArr = this.players.map(player => player.getAmountDice());\n    if(diceLeftArr.reduce((a, b) => a + b, 0) > 0){\n      return false;\n    }else{\n      return true;\n    }\n  }\n\n  play(){\n    this.playTurn();\n\n  }\n\n\n  playTurn(){\n    // debugger\n    if(window.playing){\n\n      let player = this.players[this.turn];\n      player.dice.setupDice();\n      this.rolling = true;\n      setTimeout(() => {\n        // debugger\n        this.rolling = false;\n        this.showing = true;\n      }, 10);\n\n      setTimeout(() => {\n        this.showing = false;\n      }, 25);\n\n      setTimeout(() => {\n        this.sorted = true;\n      }, 30);\n\n      setTimeout(() => {\n        player = this.players[this.turn];\n        let move = player.getMove();\n        let numOfDiceWithMove = player.dice.dieValuesArray().filter(x => x === move).length;\n        this.casinos[move - 1].takeBid(this.turn, numOfDiceWithMove);\n        let billsToUpdate = this.money[move - 1];\n        let updatedLeaders = this.getCurrentLeaders()[move - 1];\n        // debugger\n        billsToUpdate.forEach((bill,idx) => {\n          let newLeader = updatedLeaders[idx];\n          if(newLeader === null){\n            bill.setLeader(null);\n          }else{\n            // debugger\n            bill.setLeader(this.colorNums[newLeader]);\n          }\n        });\n        this.sorted = false;\n        player.dice.setAmountDice(player.dice.diceLeft - numOfDiceWithMove);\n      }, 40);\n\n      setTimeout(() => {\n        this.turn = (this.turn + 1) % this.players.length;\n        let consecutiveDonePlayers = 0;\n        // debugger\n        while(this.players[this.turn].getAmountDice() === 0 && consecutiveDonePlayers < this.numPlayers) {\n          this.turn = (this.turn + 1) % this.numPlayers;\n          consecutiveDonePlayers += 1;\n        }\n        if (consecutiveDonePlayers < this.numPlayers) {\n          this.playTurn();\n          this.playTurn.bind(this);\n        } else {\n          this.resolveBids();\n        }\n      }, 45);\n\n    }else{\n      setTimeout(() => {\n        this.playTurn();\n        this.playTurn.bind(this);\n      }, 500);\n    }\n\n  }\n\n  getPlaces(arr){\n    let dict = {};\n    arr.forEach((el, idx) => dict[el] = idx);\n    arr = arr.sort((a,b) => b - a);\n    let first;\n    if(arr[1] === arr[0]){\n      first = null;\n    }else{\n      first = dict[arr[0]];\n    }\n\n    arr = arr.filter(el => el !== arr[0]);\n    let second;\n    if(arr[1] === arr[0]){\n      second = null;\n    }else{\n      second = dict[arr[0]];\n    }\n\n    arr = arr.filter(el => el !== arr[0]);\n    let third;\n    if(arr[1] === arr[0]){\n      third = null;\n    }else{\n      third = dict[arr[0]];\n    }\n\n    return [first, second, third];\n    // need to return player not number of dice bid\n  }\n\n  getCurrentLeaders(){\n    let diceBids = JSON.parse(JSON.stringify(this.casinos.map(casino => casino.diceBids)));\n    let leaders = diceBids.map(diceBid => this.getPlaces(diceBid));\n    return leaders;\n  }\n\n  resolveBids(){\n    let winners = this.getCurrentLeaders();\n    winners.forEach((casinoWinners, casinoIdx) => {\n      casinoWinners.forEach((winner, placeIdx) => {\n        if(winner !== null && this.money[casinoIdx][placeIdx]){\n          this.players[winner].money += this.money[casinoIdx][placeIdx].amount;\n        }\n      });\n    });\n    this.declareWinner();\n  }\n\n  getMax(arr){\n    let maxIdx = 0;\n    let maxVal = arr[maxIdx];\n    let multipleMaxes = false;\n    arr.forEach((el, idx) => {\n      if(el > maxVal){\n        maxVal = el;\n        maxIdx = idx;\n        multipleMaxes = false;\n      }else if(el === maxVal){\n        multipleMaxes = true;\n      }\n    });\n    if(multipleMaxes){\n      return \"multiple\";\n    }else{\n      return maxIdx;\n    }\n  }\n\n  declareWinner(){\n    let moneyArray = this.players.map(player => player.money);\n    this.winner = this.getMax(moneyArray);\n  }\n\n  draw() {\n    if(window.playing){\n      this.ctx.clearRect(0, 0, Game.WIDTH, Game.HEIGHT);\n      this.ctx.fillStyle = Game.BACKGROUND_COLOR;\n      this.ctx.fillRect(0, 0, Game.WIDTH, Game.HEIGHT);\n\n      this.casinos.forEach(casino => casino.draw(this.ctx));\n\n      this.money.forEach((billSet, bSetIdx) => {\n        billSet.forEach((bill, billIdx) => bill.draw(this.ctx, bSetIdx, billIdx));\n      });\n\n      this.players.forEach((player) => player.draw(this.ctx));\n      let player = this.players[this.turn];\n      if(this.rolling){\n        player.playerRollDice(this.ctx);\n        // debugger\n      }else if(this.sorted){\n        player.playerSortDice(this.ctx);\n      }else if(this.showing){\n        player.playerShowDice(this.ctx);\n      }\n\n      if(this.winner !== false){\n        if(this.winOpacity < 1){\n          this.winOpacity += 0.005;\n        }\n        this.drawEndGameNotification();\n      }\n    }else{\n      this.ctx.clearRect(0, 0, Game.WIDTH, Game.HEIGHT);\n      this.ctx.fillStyle = Game.BACKGROUND_COLOR;\n      this.ctx.fillRect(0, 0, Game.WIDTH, Game.HEIGHT);\n\n      this.ctx.font = \"40px sans-serif\";\n      this.ctx.textAlign = \"center\";\n      this.ctx.fillStyle = \"#000000\";\n      this.ctx.fillText(`Las Vegas Rules`, 535, 100);\n\n      this.ctx.font = \"20px sans-serif\";\n      this.ctx.fillText(`1. Roll Dice`, 535, 150);\n      this.ctx.fillText(`2. Bid Your Dice at a Casino Matching Your Roll`, 535, 200);\n      this.ctx.fillText(`3. Win a Casino's Money if You Bid the Most`, 535, 250);\n      this.ctx.fillText(`4. The Player With the Most Money Wins When Everyone is out of Dice`, 535, 300);\n\n    }\n  }\n\n  drawEndGameNotification(){\n    if(this.winner === \"multiple\"){\n      this.ctx.fillStyle = \"#ffffff\";\n    }else{\n      this.ctx.fillStyle = this.players[this.winner].color;\n    }\n    this.ctx.globalAlpha = 0.7 * this.winOpacity;\n    this.ctx.fillRect(50, 200, 970, 200);\n\n    this.ctx.globalAlpha = this.winOpacity;\n    this.ctx.font = \"30px sans-serif\";\n    this.ctx.textAlign = \"center\";\n    this.ctx.fillStyle = \"#000000\";\n    if(this.winner === \"multiple\"){\n      this.ctx.fillText(`The game is a tie`, 535, 315);\n    }else if(this.winner === 0){\n      this.ctx.fillText(`${this.players[this.winner].name} win with $${this.players[this.winner].money/1000},000!`, 535, 315);\n    } else{\n      this.ctx.fillText(`${this.players[this.winner].name} wins with $${this.players[this.winner].money/1000},000!`, 535, 315);\n    }\n\n    this.ctx.strokeStyle = \"#000000\";\n    this.ctx.globalAlpha = 1;\n    this.ctx.strokeRect(50, 200, 970, 200);\n  }\n\n  buildCasinos(){\n    let newCasino;\n    for(let i=0; i < 6; i++) {\n      newCasino = new Casino([(170 * i) + 50, (Game.HEIGHT / 2) - 100], this.numPlayers, this.colorNums);\n      this.casinos.push(newCasino);\n    }\n  }\n\n  dealMoney(){\n    for(let i=0; i<6; i++) {\n      let casinoBillSet = [];\n      let totalMoney = 0;\n      while(casinoBillSet.length < 3 && totalMoney < 50000 ){\n        let amt = this.generateBillAmount();\n        totalMoney += amt;\n        let newBill = new Bill(amt);\n        casinoBillSet.push(newBill);\n      }\n      casinoBillSet.sort((a, b) => b.amount - a.amount);\n      this.money.push(casinoBillSet);\n    }\n  }\n\n  generateBillAmount(){\n    return 10000 * Math.ceil(Math.random() * 10);\n  }\n\n  populatePlayers(){\n    let playerNums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\n    playerNums = this.shuffle(playerNums).slice(0, this.numPlayers);\n\n    for(let i=0; i<this.numPlayers; i++){\n      if(i === 0) {\n        let newPlayer = new Player(\"human\", playerNums[i], this.colorNums[i], i, this.numPlayers);\n        this.players.push(newPlayer);\n      } else {\n        let newPlayer = new Player(\"cpu\", playerNums[i], this.colorNums[i], i, this.numPlayers);\n        this.players.push(newPlayer);\n      }\n    }\n  }\n\n  shuffle(array) {\n    let i = 0;\n    let j = 0;\n    let holder = null;\n\n    for (i = array.length - 1; i > 0; i -= 1) {\n      j = Math.floor(Math.random() * (i + 1));\n      holder = array[i];\n      array[i] = array[j];\n      array[j] = holder;\n    }\n    return array;\n  }\n}\n\nGame.BACKGROUND_COLOR = \"#808080\";\nGame.WIDTH = 1070;\nGame.HEIGHT = 600;\n\nmodule.exports = Game;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/game.js\n// module id = 1\n// module chunks = 0","class Board {\n  constructor(game, ctx) {\n    this.ctx = ctx;\n    this.game = game;\n  }\n\n  start() {\n    // this.lastTime = 0;\n    requestAnimationFrame(this.animate.bind(this));\n  }\n\n  animate(time) {\n    // const timeDelta = time - this.lastTime;\n\n    this.game.draw();\n    // this.lastTime = time;\n\n    requestAnimationFrame(this.animate.bind(this));\n  }\n}\n\nmodule.exports = Board;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/board.js\n// module id = 2\n// module chunks = 0","const Die = require(\"./die\");\n\nlet COLORS = ['#ff0000', '#8080ff', '#00ff00', '#ffff00', '#ffa500', '#ff00ff'];\n\nclass Casino {\n    constructor(pos, numPlayers, colorNums) {\n      this.numPlayers = numPlayers;\n      this.color = \"#dd7d6e\";\n      this.topLeftX = pos[0];\n      this.topLeftY = pos[1];\n      this.height = 200;\n      this.width = 120;\n      this.casinoNumber = (pos[0] - 50) / 170;\n      this.diceBids = [0,0,0,0,0].slice(0, numPlayers);\n      this.playerColors = colorNums.map(num => COLORS[num]);\n      this.showDice = [];\n\n      this.setupShowDice();\n\n    }\n\n    getDieCoords(idx){\n      switch (idx) {\n        case 0:\n          if(this.numPlayers < 4){\n            return [this.topLeftX + 47.5, this.topLeftY + 165];\n          }else{\n            return [this.topLeftX + 71.66, this.topLeftY + 165];\n          }\n        case 1:\n          if(this.numPlayers < 3){\n            return [this.topLeftX + 47.5, this.topLeftY + 130];\n          }else if(this.numPlayers < 4){\n            return [this.topLeftX + 23.33, this.topLeftY + 130];\n          } else {\n            return [this.topLeftX + 23.33, this.topLeftY + 165];\n          }\n        case 2:\n          if(this.numPlayers < 5){\n            return [this.topLeftX + 71.66, this.topLeftY + 130];\n          } else {\n            return [this.topLeftX + 11.25, this.topLeftY + 130];\n          }\n        case 3:\n          if(this.numPlayers < 5){\n            return [this.topLeftX + 71.66, this.topLeftY + 130];\n          } else {\n            return [this.topLeftX + 47.5, this.topLeftY + 130];\n          }\n        case 4:\n          return [this.topLeftX + 83.75, this.topLeftY + 130];\n\n      }\n    }\n\n    setupShowDice(){\n      this.playerColors.forEach((color, idx) => {\n        let dieCoords = this.getDieCoords(idx);\n        let newDie = new Die(color, dieCoords[0], dieCoords[1]);\n        this.showDice.push(newDie);\n      });\n    }\n\n    takeBid(playerId, amount){\n      this.diceBids[playerId] += amount;\n    }\n\n\n\n    draw(ctx){\n      ctx.fillStyle = this.color;\n      ctx.strokeStyle = \"#000000\";\n      ctx.fillRect(this.topLeftX, this.topLeftY, this.width, this.height);\n      ctx.strokeRect(this.topLeftX, this.topLeftY, this.width, this.height);\n      ctx.font = \"20px sans-serif\";\n      ctx.textAlign = \"center\";\n      ctx.strokeStyle = \"#000000\";\n      ctx.strokeText(`Casino #${this.casinoNumber + 1}`, this.topLeftX + 60, this.topLeftY + 25);\n\n\n      this.showDice.map((die, idx) => {\n        die.renderDieBase(ctx);\n        if(this.diceBids[idx] > 0){\n          die.rollInternal(this.diceBids[idx]);\n          die.renderDieFace(ctx, true);\n        }\n      });\n    }\n}\n\nmodule.exports = Casino;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/casino.js\n// module id = 3\n// module chunks = 0","let COLORS = ['#ff0000', '#8080ff', '#00ff00', '#ffff00', '#ffa500', '#ff00ff'];\n\nclass Bill {\n    constructor(amount) {\n      this.color = \"#c6e5c3\";\n      this.height = 20;\n      this.width = 60;\n      this.amount = amount;\n      this.leader = null;\n    }\n\n    setLeader(leaderColor){\n      this.leader = leaderColor;\n    }\n\n    draw(ctx, casinoNum, placement){\n      let topLeftX = 95 + (170 * casinoNum);\n      let topLeftY = 235 + (30 * placement);\n\n      if(this.leader !== null){\n        ctx.fillStyle = COLORS[this.leader];\n        ctx.beginPath();\n        ctx.arc(topLeftX - 36, topLeftY + 10, 5, 0, 2 * Math.PI, true);\n        ctx.fill();\n      }\n\n      ctx.font = \"14px sans-serif\";\n      ctx.textAlign = \"left\";\n      ctx.fillStyle = \"#000000\";\n      ctx.fillText(`${this.getPlacement(placement)}:`, topLeftX - 30, topLeftY + 15);\n\n\n      ctx.fillStyle = this.color;\n      ctx.strokeStyle = \"#000000\";\n      ctx.fillRect(topLeftX, topLeftY, this.width, this.height);\n      ctx.strokeRect(topLeftX, topLeftY, this.width, this.height);\n\n      ctx.font = \"14px sans-serif\";\n      ctx.textAlign = \"center\";\n      ctx.fillStyle = \"#000000\";\n      ctx.fillText(`$${this.amount / 1000},000`, topLeftX + 30, 15 + topLeftY);\n    }\n\n    getPlacement(placement){\n      switch (placement) {\n        case 0:\n          return '1st';\n        case 1:\n          return '2nd';\n        case 2:\n          return '3rd';\n      }\n    }\n}\n\nmodule.exports = Bill;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/bill.js\n// module id = 4\n// module chunks = 0","const Dice = require(\"./dice\");\nconst HumanPlayer = require(\"./human_player\");\nconst CPUPlayer = require(\"./cpu_player\");\n\nlet AVATARS = ['avatars/Amy.png', 'avatars/Angela.png', 'avatars/Anthony.png',\n              'avatars/Antonio.png', 'avatars/Chloe.png', 'avatars/Curtis.png',\n              'avatars/Hector.png', 'avatars/Joshua.png', 'avatars/Mary.png',\n              'avatars/Mohammed.png', 'avatars/Pamela.png', 'avatars/Rhonda.png',\n              'avatars/Terrance.png', 'avatars/William.png', 'avatars/Yvette.png'];\n\nlet NAMES = ['Amy', 'Angela', 'Anthony', 'Antonio', 'Chloe', 'Curtis', 'Hector',\n            'Joshua', 'Mary', 'Mohammed', 'Pamela', 'Rhonda', 'Terrance',\n            'William', 'Yvette', ];\n\nlet COLORS = ['#ff0000', '#8080ff', '#00ff00', '#ffff00', '#ffa500', '#ff00ff'];\n\nclass Player {\n  constructor(playerType, whichPlayer, whichColor, playerId, numPlayers) {\n    this.avatar = AVATARS[whichPlayer];\n    this.name = NAMES[whichPlayer];\n    this.color = COLORS[whichColor];\n    if(playerType === \"human\"){\n      this.name = \"You\";\n    }\n    this.playerId = playerId;\n    this.numPlayers = numPlayers;\n    this.playerCoords = this.getPlayerSpace();\n    this.dice = new Dice(8, this.color, this.playerCoords);\n    this.diceArray = this.dice.diceArray;\n    this.money = 0;\n  }\n\n  getHumanMove(){\n    let diceValuesArray = this.dice.dieValuesArray();\n    let idx = Math.floor(Math.random * diceValuesArray.length);\n    return diceValuesArray[idx];\n  }\n\n  getCPUMove(){\n    let diceValuesArray = this.dice.dieValuesArray();\n    let idx = Math.floor(Math.random() * diceValuesArray.length);\n    return diceValuesArray[idx];\n  }\n\n  getMove(){\n    if(this.playerType === \"human\"){\n      return this.getHumanMove();\n    }else{\n      return this.getCPUMove();\n    }\n  }\n\n\n  playerRollDice(ctx){\n    this.dice.rollDice(ctx);\n  }\n\n  playerShowDice(ctx){\n    this.dice.showDice(ctx);\n  }\n\n  playerSortDice(ctx){\n    this.dice.sortDice(ctx);\n  }\n\n  setAmountDice(diceLeft){\n    this.dice.setAmountDice(diceLeft);\n  }\n\n  getAmountDice(){\n    return this.dice.diceLeft;\n  }\n\n  draw(ctx){\n    let centerX = (this.playerCoords[0] + this.playerCoords[2]) / 2;\n    let centerY = 0;\n    if(this.playerCoords[3] === 600){\n      centerY = 528;\n    }\n\n\n    let img = new Image();\n    img.src = this.avatar;\n    ctx.drawImage(img, centerX, centerY, 50, 72);\n\n\n    ctx.font = \"20px sans-serif\";\n    ctx.textAlign = \"center\";\n    ctx.fillStyle = \"#000000\";\n    ctx.fillText(`${this.name}`, centerX + 100, centerY + 35);\n    ctx.fillText(`$${this.money/1000},000`, centerX + 100, centerY + 60);\n\n    ctx.fillStyle = this.color;\n    ctx.beginPath();\n    ctx.arc(centerX - 35, centerY + 35, 20, 0, 2 * Math.PI, true);\n    ctx.fill();\n\n  }\n\n  getPlayerSpace(){\n    switch (this.playerId) {\n      case 0:\n        if(this.numPlayers < 4) {\n          return([0, 400, 1070, 600]);\n        }else{\n          return([536,400, 1070, 600]);\n        }\n      case 1:\n        if(this.numPlayers < 3) {\n          return([0, 0, 1070, 200]);\n        }else if(this.numPlayers < 4){\n          return([0, 0, 535, 200]);\n        }else{\n          return([0, 400, 535, 600]);\n        }\n      case 2:\n        if(this.numPlayers < 4){\n          return([536, 0, 1070, 200]);\n        }else if(this.numPlayers < 5) {\n          return([0, 0, 535, 200]);\n        }else{\n          return([0, 0, 356, 200]);\n        }\n      case 3:\n        if(this.numPlayers < 5) {\n          return([536, 0, 1070, 200]);\n        }else{\n          return([357, 0, 713, 200]);\n        }\n      case 4:\n        return([714, 0, 1070, 200]);\n    }\n  }\n\n\n\n}\n\nmodule.exports = Player;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/player.js\n// module id = 5\n// module chunks = 0","const Die = require(\"./die\");\n\nclass Dice {\n  constructor(diceLeft, color, playerCoords) {\n    this.color = color;\n    this.playerCoords = playerCoords;\n    this.diceLeft = diceLeft;\n\n    this.diceLocs = this.diceLocations();\n    this.diceArray = [];\n\n    this.setupDice();\n  }\n\n  setAmountDice(diceLeft){\n    this.diceLeft = diceLeft;\n  }\n\n  roll(){\n    let ans = Math.ceil(Math.rand() * 6);\n  }\n\n  diceLocations(){\n    let centerX = ((this.playerCoords[2] - this.playerCoords[0]) / 2) + this.playerCoords[0];\n    let centerY = ((this.playerCoords[3] - this.playerCoords[1]) / 2) + this.playerCoords[1];\n    let centerDie = (this.diceLeft - 1) / 2;\n    let diceLocations = [];\n    // debugger\n    for (var i = 0; i < this.diceLeft; i++) {\n      let centerLoc;\n      if(centerY > 300){\n        centerLoc = [Math.floor(centerX - 12 + ((i - centerDie) * 37)), centerY - 25];\n      } else{\n        centerLoc = [centerX - 12 + ((i - centerDie) * 37), centerY];\n      }\n      diceLocations.push(centerLoc);\n    }\n    return diceLocations;\n  }\n\n  setupDice(){\n    this.diceLocs = this.diceLocations();\n    this.diceArray = this.diceLocs.map(location => new Die(this.color, location[0], location[1], Math.ceil(Math.random() * 6)));\n  }\n\n\n  rollDice(ctx){\n    this.diceArray.forEach((die) => {\n      die.rollInternal(Math.ceil(Math.random() * 6));\n      die.renderDieBase(ctx);\n      die.renderDieFace(ctx);\n    });\n  }\n\n  showDice(ctx){\n    this.diceArray.forEach((die) => {\n      die.renderDieBase(ctx);\n      die.renderDieFace(ctx, true);\n    });\n  }\n\n  sortDice(ctx){\n    let valueArray = this.dieValuesArray().sort();\n    valueArray.forEach((value, idx) => {\n      let die = this.diceArray[idx];\n      die.rollInternal(value);\n      // die.clearDie(ctx);\n      die.renderDieBase(ctx);\n      die.renderDieFace(ctx, true);\n    });\n  }\n\n  dieValuesArray(){\n    return this.diceArray.map(die => die.value);\n  }\n}\n\n  module.exports = Dice;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/dice.js\n// module id = 6\n// module chunks = 0","const COORDS = [5, 12.5, 20];\n\n\nclass Die {\n  constructor(color, topLeftX, topLeftY, value =null) {\n    this.color = color;\n    this.topLeftX = topLeftX;\n    this.topLeftY = topLeftY;\n    this.value = value;\n\n  }\n\n  rollInternal(value){\n    this.value = value;\n  }\n\n  clearDie(ctx){\n    ctx.clearRect(this.topLeftX, this.topLeftY, 25, 25);\n  }\n\n  renderDieBase(ctx){\n    ctx.fillStyle = this.color;\n    ctx.strokeStyle = \"#000000\";\n    ctx.fillRect(this.topLeftX, this.topLeftY, 25, 25);\n    ctx.strokeRect(this.topLeftX, this.topLeftY, 25, 25);\n  }\n\n  renderDieFace(ctx, organized = false, temp = false){\n    let toRender = temp || this.value;\n    switch (toRender) {\n      case 1:\n        this.renderDiePoint(ctx,5);\n        break;\n      case 2:\n        if(organized || Math.random() > 0.5){\n          this.renderDiePoint(ctx,1);\n          this.renderDiePoint(ctx,9);\n        }else{\n          this.renderDiePoint(ctx,3);\n          this.renderDiePoint(ctx,7);\n        }\n        break;\n      case 3:\n        this.renderDiePoint(ctx,5);\n        if(organized || Math.random() > 0.5){\n          this.renderDiePoint(ctx,1);\n          this.renderDiePoint(ctx,9);\n        }else{\n          this.renderDiePoint(ctx,3);\n          this.renderDiePoint(ctx,7);\n        }\n        break;\n      case 4:\n        this.renderDiePoint(ctx,1);\n        this.renderDiePoint(ctx,9);\n        this.renderDiePoint(ctx,3);\n        this.renderDiePoint(ctx,7);\n        break;\n      case 5:\n        this.renderDiePoint(ctx,1);\n        this.renderDiePoint(ctx,9);\n        this.renderDiePoint(ctx,3);\n        this.renderDiePoint(ctx,7);\n        this.renderDiePoint(ctx,5);\n        break;\n      case 6:\n        this.renderDiePoint(ctx,1);\n        this.renderDiePoint(ctx,9);\n        this.renderDiePoint(ctx,3);\n        this.renderDiePoint(ctx,7);\n        if(organized || Math.random() > 0.5){\n          this.renderDiePoint(ctx,4);\n          this.renderDiePoint(ctx,6);\n        }else{\n          this.renderDiePoint(ctx,2);\n          this.renderDiePoint(ctx,8);\n        }\n        break;\n      case 7:\n        this.renderDiePoint(ctx,1);\n        this.renderDiePoint(ctx,9);\n        this.renderDiePoint(ctx,3);\n        this.renderDiePoint(ctx,7);\n        this.renderDiePoint(ctx,5);\n        this.renderDiePoint(ctx,4);\n        this.renderDiePoint(ctx,6);\n        break;\n      case 8:\n        this.renderDiePoint(ctx,1);\n        this.renderDiePoint(ctx,9);\n        this.renderDiePoint(ctx,3);\n        this.renderDiePoint(ctx,7);\n        this.renderDiePoint(ctx,2);\n        this.renderDiePoint(ctx,8);\n        this.renderDiePoint(ctx,4);\n        this.renderDiePoint(ctx,6);\n        break;\n    }\n  }\n\n  renderDiePoint(ctx, faceLocation){\n    ctx.fillStyle = \"#000000\";\n    switch (faceLocation) {\n      case 1:\n        ctx.beginPath();\n        ctx.arc(this.topLeftX + COORDS[0], this.topLeftY + COORDS[0], 3, 0, 2 * Math.PI, true);\n        ctx.fill();\n        break;\n      case 2:\n        ctx.beginPath();\n        ctx.arc(this.topLeftX + COORDS[1], this.topLeftY + COORDS[0], 3, 0, 2 * Math.PI, true);\n        ctx.fill();\n        break;\n      case 3:\n        ctx.beginPath();\n        ctx.arc(this.topLeftX + COORDS[2], this.topLeftY + COORDS[0], 3, 0, 2 * Math.PI, true);\n        ctx.fill();\n        break;\n      case 4:\n        ctx.beginPath();\n        ctx.arc(this.topLeftX + COORDS[0], this.topLeftY + COORDS[1], 3, 0, 2 * Math.PI, true);\n        ctx.fill();\n        break;\n      case 5:\n        ctx.beginPath();\n        ctx.arc(this.topLeftX + COORDS[1], this.topLeftY + COORDS[1], 3, 0, 2 * Math.PI, true);\n        ctx.fill();\n        break;\n      case 6:\n        ctx.beginPath();\n        ctx.arc(this.topLeftX + COORDS[2], this.topLeftY + COORDS[1], 3, 0, 2 * Math.PI, true);\n        ctx.fill();\n        break;\n      case 7:\n        ctx.beginPath();\n        ctx.arc(this.topLeftX + COORDS[0], this.topLeftY + COORDS[2], 3, 0, 2 * Math.PI, true);\n        ctx.fill();\n        break;\n      case 8:\n        ctx.beginPath();\n        ctx.arc(this.topLeftX + COORDS[1], this.topLeftY + COORDS[2], 3, 0, 2 * Math.PI, true);\n        ctx.fill();\n        break;\n      case 9:\n        ctx.beginPath();\n        ctx.arc(this.topLeftX + COORDS[2], this.topLeftY + COORDS[2], 3, 0, 2 * Math.PI, true);\n        ctx.fill();\n        break;\n    }\n  }\n}\n\nmodule.exports = Die;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/die.js\n// module id = 7\n// module chunks = 0"],"sourceRoot":""}