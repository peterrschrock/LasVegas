{"version":3,"sources":["webpack:///webpack/bootstrap 4abfc9bf7763b28bd20b","webpack:///./lib/las_vegas.js","webpack:///./lib/game.js","webpack:///./lib/casino.js","webpack:///./lib/die.js","webpack:///./lib/bill.js","webpack:///./lib/player.js","webpack:///./lib/dice.js","webpack:///./lib/ai_player.js","webpack:///./lib/board.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,EAAC;;AAED;AACA;AACA,EAAC;;AAED;AACA;AACA,EAAC;;AAED;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA,EAAC;;;;;;;AChDD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAiC;AACjC;AACA;AACA;AACA,gCAA+B;AAC/B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAiC;AACjC;AACA;AACA,gCAA+B;;AAE/B,8BAA6B;;AAE7B,0BAAyB;;AAEzB,sBAAqB;;AAErB,kBAAiB;;AAEjB,cAAa;;AAEb;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb,UAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,cAAa;;AAEb;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,cAAa;AACb;AACA,cAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT,kCAAiC,+BAA+B,aAAa,uCAAuC;AACpH,UAAS;AACT,kCAAiC,+BAA+B,cAAc,uCAAuC;AACrH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,mCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;AC9WA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAW;AACX;AACA;AACA;AACA;AACA;AACA,YAAW;AACX;AACA,YAAW;AACX;AACA;AACA;AACA;AACA;AACA,YAAW;AACX;AACA;AACA;AACA;AACA;AACA,YAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;;AAEA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAgC,sBAAsB;;;AAGtD;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;;AAEA;;;;;;;AC1FA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACvJA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAsB,6BAA6B;;;AAGnD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAuB,mBAAmB;AAC1C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;AAGA;AACA;;AAEA;AACA,YAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAwB,UAAU;AAClC,0BAAyB,kBAAkB;;AAE3C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA4B,UAAU,GAAG,QAAQ,GAAG,iBAAiB,GAAG,QAAQ,aAAa,iBAAiB;AAC9G,YAAW;AACX,6BAA4B,UAAU,GAAG,QAAQ,GAAG,iBAAiB,GAAG,QAAQ,aAAa,iBAAiB;AAC9G;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;;;AC1NA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,oBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB,0BAA0B;AAC/C;;AAEA,uCAAsC,QAAQ;AAC9C,2DAA0D,QAAQ;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;;;AAGP;AACA;AACA;AACA;;AAEA;AACA,kBAAiB;AACjB,qCAAoC,OAAO;AAC3C,8CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA,sBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;AACA,yCAAwC,QAAQ;AAChD;AACA;AACA,wCAAuC,uBAAuB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA,oBAAmB,gBAAgB;AACnC;AACA;AACA,oBAAmB,gBAAgB;AACnC;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;;AAEA;;;;;;;AC5LA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA","file":"./lib/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 4abfc9bf7763b28bd20b","let Game = require(\"./game\");\nlet Board = require(\"./board\");\nwindow.playing = false;\nwindow.numPlayers = 5;\n\nconst startGame = function(){\n  let canvasEl = document.getElementsByTagName(\"canvas\")[0];\n  canvasEl.width = Game.WIDTH;\n  canvasEl.height = Game.HEIGHT;\n\n  let ctx = canvasEl.getContext(\"2d\");\n  let game = new Game(window.numPlayers, ctx);\n  new Board(game, ctx).start();\n};\n\ndocument.addEventListener(\"DOMContentLoaded\", startGame());\n\ndocument.getElementById(\"github\").addEventListener(\"click\", function(){\n  window.open('https://github.com/peterrschrock','_blank');\n});\n\ndocument.getElementById(\"linked-in\").addEventListener(\"click\", function(){\n  window.open('https://www.linkedin.com/in/peter-schrock-67a96aa9','_blank');\n});\n\ndocument.getElementById(\"about-game\").addEventListener(\"click\", function(){\n  window.playing = false;\n});\n\ndocument.getElementById(\"view-game\").addEventListener(\"click\", function(){\n  window.playing = true;\n});\n\ndocument.getElementById(\"new-game\").addEventListener(\"click\", function(){\n  window.playing = true;\n  startGame();\n});\n\ndocument.getElementById(\"increase-players\").addEventListener(\"click\", function(){\n  if(window.numPlayers < 5){\n    window.numPlayers += 1;\n  }\n});\n\ndocument.getElementById(\"decrease-players\").addEventListener(\"click\", function(){\n  if(window.numPlayers > 2){\n    window.numPlayers -= 1;\n  }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/las_vegas.js\n// module id = 0\n// module chunks = 0","const Casino = require(\"./casino\");\nconst Bill = require(\"./bill\");\nconst Player = require(\"./player\");\nlet Board = require(\"./board\");\n\nclass Game {\n    constructor(numPlayers, ctx) {\n        // let players\n        this.numPlayers = numPlayers;\n        this.ctx = ctx;\n        this.casinos = [];\n        this.money = [];\n        this.players = [];\n        this.rolling = false;\n        this.sorted = false;\n        this.showing = false;\n        this.winner = false;\n        this.winOpacity = 0.00;\n\n        this.colorNums = [\n            0,\n            1,\n            2,\n            3,\n            4,\n            5\n        ];\n        this.colorNums = this.shuffle(this.colorNums).slice(0, this.numPlayers);\n\n        this.buildCasinos();\n        this.dealMoney();\n        this.populatePlayers();\n\n        this.turn = Math.floor(Math.random() * this.players.length);\n\n        this.draw();\n\n        this.play();\n    }\n\n    gameOver() {\n        let diceLeftArr = this.players.map(player => player.getAmountDice());\n        if (diceLeftArr.reduce((a, b) => a + b, 0) > 0) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    play() {\n        this.playTurn();\n\n    }\n\n    playTurn() {\n        if (window.playing) {\n            let player = this.players[this.turn];\n            this.rolling = true;\n            setTimeout(() => {\n\n                this.rolling = false;\n                this.showing = true;\n\n                setTimeout(() => {\n                    this.showing = false;\n\n                    setTimeout(() => {\n                        this.sorted = true;\n\n                        setTimeout(() => {\n                          // debugger\n                            player = this.players[this.turn];\n                            player.getMove(this, player, this.money, this.casinos, (move, that, player2, ctx)=>{\n                              if(player.playerType === 'human'){\n                                that.ctx = ctx;\n                                new Board(that, ctx).start();\n                              }\n                              let numOfDiceWithMove = player2.dice.dieValuesArray().filter(x => x === move).length;\n                              this.players.forEach(aPlayer => {\n                                aPlayer.moveData = [0,0];\n                              });\n                              player2.moveData = [move, numOfDiceWithMove];\n                              // debugger\n                              that.casinos[move - 1].takeBid(that.turn, numOfDiceWithMove);\n                              let billsToUpdate = that.money[move - 1];\n                              let updatedLeaders = that.getCurrentLeaders()[move - 1];\n                              // debugger\n                              billsToUpdate.forEach((bill, idx) => {\n                                let newLeader = updatedLeaders[idx];\n                                if (newLeader === null) {\n                                  bill.setLeader(null);\n                                } else {\n                                  // debugger\n                                  bill.setLeader(that.colorNums[newLeader]);\n                                }\n                              });\n                              that.sorted = false;\n                              player2.dice.setAmountDice(player2.dice.diceLeft - numOfDiceWithMove);\n                              player2.dice.setupDice();\n\n                              setTimeout(() => {\n                                that.turn = (that.turn + 1) % that.players.length;\n                                let consecutiveDonePlayers = 0;\n                                while (that.players[that.turn].getAmountDice() === 0 && consecutiveDonePlayers < that.numPlayers) {\n                                  that.turn = (that.turn + 1) % that.players.length;\n                                  consecutiveDonePlayers += 1;\n                                }\n                                if (consecutiveDonePlayers < that.numPlayers) {\n                                    // that.playTurn();\n                                  that.playTurn.bind(that)();\n                                } else {\n                                  that.resolveBids ();\n                                }\n                              }, 500);\n\n                            });\n\n                        }, 1000);\n\n                    }, 500);\n\n                }, 500);\n\n            }, 1000);\n\n        }\n        else {\n            setTimeout(() => {\n                this.playTurn.bind(this)();\n            }, 5);\n        }\n    }\n\n    getPlaces(arr) {\n        let dict = {};\n        arr.forEach((el, idx) => dict[el] = idx);\n        arr = arr.sort((a, b) => b - a);\n        let first;\n        if (arr[1] === arr[0]) {\n            first = null;\n        } else {\n            first = dict[arr[0]];\n        }\n\n        arr = arr.filter(el => el !== arr[0]);\n        let second;\n        if (arr[1] === arr[0] || arr[0] === 0) {\n            second = null;\n        } else {\n            second = dict[arr[0]];\n        }\n\n        arr = arr.filter(el => el !== arr[0]);\n        let third;\n        if (arr[1] === arr[0] || arr[0] === 0) {\n            third = null;\n        } else {\n            third = dict[arr[0]];\n        }\n\n        return [first, second, third];\n        // need to return player2 not number of dice bid\n    }\n\n    getCurrentLeaders() {\n        let diceBids = JSON.parse(JSON.stringify(this.casinos.map(casino => casino.diceBids)));\n        let leaders = diceBids.map(diceBid => this.getPlaces(diceBid));\n        return leaders;\n    }\n\n    resolveBids() {\n      // debugger\n        let winners = this.getCurrentLeaders();\n        winners.forEach((casinoWinners, casinoIdx) => {\n            casinoWinners.forEach((winner, placeIdx) => {\n                if (winner !== null && this.money[casinoIdx][placeIdx]) {\n                    this.players[winner].money += this.money[casinoIdx][placeIdx].amount;\n                }\n            });\n        });\n        this.declareWinner();\n    }\n\n    getMax(arr) {\n        let maxIdx = 0;\n        let maxVal = -1;\n        let multipleMaxes = false;\n        arr.forEach((el, idx) => {\n            if (el > maxVal) {\n                maxVal = el;\n                maxIdx = idx;\n                multipleMaxes = false;\n            } else if (el === maxVal) {\n                multipleMaxes = true;\n            }\n        });\n        if (multipleMaxes) {\n            return \"multiple\";\n        } else {\n            return maxIdx;\n        }\n    }\n\n    declareWinner() {\n        // debugger\n        let moneyArray = this.players.map(player => player.money);\n        this.winner = this.getMax(moneyArray);\n    }\n\n    draw() {\n        if (window.playing) {\n            this.ctx.clearRect(0, 0, Game.WIDTH, Game.HEIGHT);\n            this.ctx.fillStyle = Game.BACKGROUND_COLOR;\n            this.ctx.fillRect(0, 0, Game.WIDTH, Game.HEIGHT);\n\n            this.casinos.forEach(casino => casino.draw(this.ctx));\n\n            this.money.forEach((billSet, bSetIdx) => {\n                billSet.forEach((bill, billIdx) => bill.draw(this.ctx, bSetIdx, billIdx));\n            });\n\n            this.players.forEach((player) => {\n                player.draw(this.ctx);\n                player.playerShowDiceBases(this.ctx);\n            });\n            let player = this.players[this.turn];\n            if (this.rolling) {\n                player.playerRollDice(this.ctx);\n                // debugger\n            } else if (this.sorted) {\n                player.playerSortDice(this.ctx);\n            } else if (this.showing) {\n                player.playerShowDice(this.ctx);\n            }\n\n            if (this.winner !== false) {\n                if (this.winOpacity < 1) {\n                    this.winOpacity += 0.005;\n                }\n                this.drawEndGameNotification();\n            }\n        } else {\n            this.ctx.clearRect(0, 0, Game.WIDTH, Game.HEIGHT);\n            this.ctx.fillStyle = Game.BACKGROUND_COLOR;\n            this.ctx.fillRect(0, 0, Game.WIDTH, Game.HEIGHT);\n\n            this.ctx.font = \"40px sans-serif\";\n            this.ctx.textAlign = \"center\";\n            this.ctx.fillStyle = \"#000000\";\n            this.ctx.fillText(`Las Vegas Rules`, 535, 100);\n\n            this.ctx.font = \"20px sans-serif\";\n            this.ctx.fillText(`1. Roll Dice`, 535, 150);\n            this.ctx.fillText(`2. Click on of Your Dice to Bid all Dice of that Value at the Matching Casino`, 535, 200);\n            this.ctx.fillText(`3. Win a Casino's Money if You Bid the Most`, 535, 250);\n            this.ctx.fillText(`4. The Player With the Most Money Wins When Everyone is out of Dice`, 535, 300);\n\n        }\n    }\n\n    drawEndGameNotification() {\n        if (this.winner === \"multiple\") {\n            this.ctx.fillStyle = \"#ffffff\";\n        } else {\n            this.ctx.fillStyle = this.players[this.winner].color;\n        }\n        this.ctx.globalAlpha = 0.7 * this.winOpacity;\n        this.ctx.fillRect(50, 200, 970, 200);\n\n        this.ctx.globalAlpha = this.winOpacity;\n        this.ctx.font = \"30px sans-serif\";\n        this.ctx.textAlign = \"center\";\n        this.ctx.fillStyle = \"#000000\";\n        if (this.winner === \"multiple\") {\n            this.ctx.fillText(`The game is a tie`, 535, 315);\n        } else if (this.winner === 0) {\n            this.ctx.fillText(`${this.players[this.winner].name} win with $${this.players[this.winner].money / 1000},000!`, 535, 315);\n        } else {\n            this.ctx.fillText(`${this.players[this.winner].name} wins with $${this.players[this.winner].money / 1000},000!`, 535, 315);\n        }\n\n        this.ctx.strokeStyle = \"#000000\";\n        this.ctx.globalAlpha = 1;\n        this.ctx.strokeRect(50, 200, 970, 200);\n    }\n\n    buildCasinos() {\n        let newCasino;\n        for (let i = 0; i < 6; i++) {\n            newCasino = new Casino([\n                (170 * i) + 50,\n                (Game.HEIGHT / 2) - 100\n            ], this.numPlayers, this.colorNums);\n            this.casinos.push(newCasino);\n        }\n    }\n\n    dealMoney() {\n        for (let i = 0; i < 6; i++) {\n            let casinoBillSet = [];\n            let totalMoney = 0;\n            while (casinoBillSet.length < 3 && totalMoney < 50000) {\n                let amt = this.generateBillAmount();\n                totalMoney += amt;\n                let newBill = new Bill(amt);\n                casinoBillSet.push(newBill);\n            }\n            casinoBillSet.sort((a, b) => b.amount - a.amount);\n            this.money.push(casinoBillSet);\n        }\n    }\n\n    generateBillAmount() {\n        return 10000 * Math.ceil(Math.random() * 10);\n    }\n\n    populatePlayers() {\n        let playerNums = [\n            0,\n            1,\n            2,\n            3,\n            4,\n            5,\n            6,\n            7,\n            8,\n            9,\n            10,\n            11,\n            12,\n            13,\n            14\n        ];\n        playerNums = this.shuffle(playerNums).slice(0, this.numPlayers);\n\n        for (let i = 0; i < this.numPlayers; i++) {\n            if (i === 0) {\n                let newPlayer = new Player(\"human\", playerNums[i], this.colorNums[i], i, this.numPlayers);\n                this.players.push(newPlayer);\n            } else {\n                let newPlayer = new Player(\"cpu\", playerNums[i], this.colorNums[i], i, this.numPlayers);\n                this.players.push(newPlayer);\n            }\n        }\n    }\n\n    shuffle(array) {\n        let i = 0;\n        let j = 0;\n        let holder = null;\n\n        for (i = array.length - 1; i > 0; i -= 1) {\n            j = Math.floor(Math.random() * (i + 1));\n            holder = array[i];\n            array[i] = array[j];\n            array[j] = holder;\n        }\n        return array;\n    }\n}\n\nGame.BACKGROUND_COLOR = \"#808080\";\nGame.WIDTH = 1070;\nGame.HEIGHT = 600;\n\nmodule.exports = Game;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/game.js\n// module id = 1\n// module chunks = 0","const Die = require(\"./die\");\n\nlet COLORS = ['#ff0000', '#8080ff', '#00ff00', '#ffff00', '#ffa500', '#ff00ff'];\n\nclass Casino {\n    constructor(pos, numPlayers, colorNums) {\n      this.numPlayers = numPlayers;\n      this.color = \"#dd7d6e\";\n      this.topLeftX = pos[0];\n      this.topLeftY = pos[1];\n      this.height = 200;\n      this.width = 120;\n      this.casinoNumber = (pos[0] - 50) / 170;\n      this.diceBids = [0,0,0,0,0].slice(0, numPlayers);\n      this.playerColors = colorNums.map(num => COLORS[num]);\n      this.showDice = [];\n\n      this.setupShowDice();\n\n    }\n\n    getDieCoords(idx){\n      switch (idx) {\n        case 0:\n          if(this.numPlayers < 4){\n            return [this.topLeftX + 47.5, this.topLeftY + 165];\n          }else{\n            return [this.topLeftX + 71.66, this.topLeftY + 165];\n          }\n        case 1:\n          if(this.numPlayers < 3){\n            return [this.topLeftX + 47.5, this.topLeftY + 130];\n          }else if(this.numPlayers < 4){\n            return [this.topLeftX + 23.33, this.topLeftY + 130];\n          } else {\n            return [this.topLeftX + 23.33, this.topLeftY + 165];\n          }\n        case 2:\n          if(this.numPlayers < 5){\n            return [this.topLeftX + 71.66, this.topLeftY + 130];\n          } else {\n            return [this.topLeftX + 11.25, this.topLeftY + 130];\n          }\n        case 3:\n          if(this.numPlayers < 5){\n            return [this.topLeftX + 71.66, this.topLeftY + 130];\n          } else {\n            return [this.topLeftX + 47.5, this.topLeftY + 130];\n          }\n        case 4:\n          return [this.topLeftX + 83.75, this.topLeftY + 130];\n\n      }\n    }\n\n    setupShowDice(){\n      this.playerColors.forEach((color, idx) => {\n        let dieCoords = this.getDieCoords(idx);\n        let newDie = new Die(color, dieCoords[0], dieCoords[1]);\n        this.showDice.push(newDie);\n      });\n    }\n\n    takeBid(playerId, amount){\n      this.diceBids[playerId] += amount;\n    }\n\n\n\n    draw(ctx){\n      ctx.fillStyle = this.color;\n      ctx.strokeStyle = \"#000000\";\n      ctx.fillRect(this.topLeftX, this.topLeftY, this.width, this.height);\n      ctx.strokeRect(this.topLeftX, this.topLeftY, this.width, this.height);\n      ctx.font = \"20px sans-serif\";\n      ctx.textAlign = \"center\";\n      ctx.strokeStyle = \"#000000\";\n      ctx.strokeText(`Casino #${this.casinoNumber + 1}`, this.topLeftX + 60, this.topLeftY + 25);\n\n\n      this.showDice.map((die, idx) => {\n        die.renderDieBase(ctx);\n        if(this.diceBids[idx] > 0){\n          die.rollInternal(this.diceBids[idx]);\n          die.renderDieFace(ctx, true);\n        }\n      });\n    }\n}\n\nmodule.exports = Casino;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/casino.js\n// module id = 2\n// module chunks = 0","const COORDS = [5, 12.5, 20];\n\nclass Die {\n    constructor(color, topLeftX, topLeftY, value = null) {\n        this.color = color;\n        this.topLeftX = topLeftX;\n        this.topLeftY = topLeftY;\n        this.value = value;\n\n    }\n\n    rollInternal(value) {\n        this.value = value;\n    }\n\n    clearDie(ctx) {\n        ctx.clearRect(this.topLeftX, this.topLeftY, 25, 25);\n    }\n\n    renderDieBase(ctx) {\n        ctx.fillStyle = this.color;\n        ctx.strokeStyle = \"#000000\";\n        ctx.fillRect(this.topLeftX, this.topLeftY, 25, 25);\n        ctx.strokeRect(this.topLeftX, this.topLeftY, 25, 25);\n    }\n\n    renderDieFace(ctx, organized = false, temp = false) {\n        let toRender = temp || this.value;\n        switch (toRender) {\n            case 1:\n                this.renderDiePoint(ctx, 5);\n                break;\n            case 2:\n                if (organized || Math.random() > 0.5) {\n                    this.renderDiePoint(ctx, 1);\n                    this.renderDiePoint(ctx, 9);\n                } else {\n                    this.renderDiePoint(ctx, 3);\n                    this.renderDiePoint(ctx, 7);\n                }\n                break;\n            case 3:\n                this.renderDiePoint(ctx, 5);\n                if (organized || Math.random() > 0.5) {\n                    this.renderDiePoint(ctx, 1);\n                    this.renderDiePoint(ctx, 9);\n                } else {\n                    this.renderDiePoint(ctx, 3);\n                    this.renderDiePoint(ctx, 7);\n                }\n                break;\n            case 4:\n                this.renderDiePoint(ctx, 1);\n                this.renderDiePoint(ctx, 9);\n                this.renderDiePoint(ctx, 3);\n                this.renderDiePoint(ctx, 7);\n                break;\n            case 5:\n                this.renderDiePoint(ctx, 1);\n                this.renderDiePoint(ctx, 9);\n                this.renderDiePoint(ctx, 3);\n                this.renderDiePoint(ctx, 7);\n                this.renderDiePoint(ctx, 5);\n                break;\n            case 6:\n                this.renderDiePoint(ctx, 1);\n                this.renderDiePoint(ctx, 9);\n                this.renderDiePoint(ctx, 3);\n                this.renderDiePoint(ctx, 7);\n                if (organized || Math.random() > 0.5) {\n                    this.renderDiePoint(ctx, 4);\n                    this.renderDiePoint(ctx, 6);\n                } else {\n                    this.renderDiePoint(ctx, 2);\n                    this.renderDiePoint(ctx, 8);\n                }\n                break;\n            case 7:\n                this.renderDiePoint(ctx, 1);\n                this.renderDiePoint(ctx, 9);\n                this.renderDiePoint(ctx, 3);\n                this.renderDiePoint(ctx, 7);\n                this.renderDiePoint(ctx, 5);\n                this.renderDiePoint(ctx, 4);\n                this.renderDiePoint(ctx, 6);\n                break;\n            case 8:\n                this.renderDiePoint(ctx, 1);\n                this.renderDiePoint(ctx, 9);\n                this.renderDiePoint(ctx, 3);\n                this.renderDiePoint(ctx, 7);\n                this.renderDiePoint(ctx, 2);\n                this.renderDiePoint(ctx, 8);\n                this.renderDiePoint(ctx, 4);\n                this.renderDiePoint(ctx, 6);\n                break;\n        }\n    }\n\n    renderDiePoint(ctx, faceLocation) {\n        ctx.fillStyle = \"#000000\";\n        switch (faceLocation) {\n            case 1:\n                ctx.beginPath();\n                ctx.arc(this.topLeftX + COORDS[0], this.topLeftY + COORDS[0], 3, 0, 2 * Math.PI, true);\n                ctx.fill();\n                break;\n            case 2:\n                ctx.beginPath();\n                ctx.arc(this.topLeftX + COORDS[1], this.topLeftY + COORDS[0], 3, 0, 2 * Math.PI, true);\n                ctx.fill();\n                break;\n            case 3:\n                ctx.beginPath();\n                ctx.arc(this.topLeftX + COORDS[2], this.topLeftY + COORDS[0], 3, 0, 2 * Math.PI, true);\n                ctx.fill();\n                break;\n            case 4:\n                ctx.beginPath();\n                ctx.arc(this.topLeftX + COORDS[0], this.topLeftY + COORDS[1], 3, 0, 2 * Math.PI, true);\n                ctx.fill();\n                break;\n            case 5:\n                ctx.beginPath();\n                ctx.arc(this.topLeftX + COORDS[1], this.topLeftY + COORDS[1], 3, 0, 2 * Math.PI, true);\n                ctx.fill();\n                break;\n            case 6:\n                ctx.beginPath();\n                ctx.arc(this.topLeftX + COORDS[2], this.topLeftY + COORDS[1], 3, 0, 2 * Math.PI, true);\n                ctx.fill();\n                break;\n            case 7:\n                ctx.beginPath();\n                ctx.arc(this.topLeftX + COORDS[0], this.topLeftY + COORDS[2], 3, 0, 2 * Math.PI, true);\n                ctx.fill();\n                break;\n            case 8:\n                ctx.beginPath();\n                ctx.arc(this.topLeftX + COORDS[1], this.topLeftY + COORDS[2], 3, 0, 2 * Math.PI, true);\n                ctx.fill();\n                break;\n            case 9:\n                ctx.beginPath();\n                ctx.arc(this.topLeftX + COORDS[2], this.topLeftY + COORDS[2], 3, 0, 2 * Math.PI, true);\n                ctx.fill();\n                break;\n        }\n    }\n}\n\nmodule.exports = Die;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/die.js\n// module id = 3\n// module chunks = 0","let COLORS = ['#ff0000', '#8080ff', '#00ff00', '#ffff00', '#ffa500', '#ff00ff'];\n\nclass Bill {\n    constructor(amount) {\n      this.color = \"#c6e5c3\";\n      this.height = 20;\n      this.width = 60;\n      this.amount = amount;\n      this.leader = null;\n    }\n\n    setLeader(leaderColor){\n      this.leader = leaderColor;\n    }\n\n    draw(ctx, casinoNum, placement){\n      let topLeftX = 95 + (170 * casinoNum);\n      let topLeftY = 235 + (30 * placement);\n\n      if(this.leader !== null){\n        ctx.fillStyle = COLORS[this.leader];\n        ctx.beginPath();\n        ctx.arc(topLeftX - 36, topLeftY + 10, 5, 0, 2 * Math.PI, true);\n        ctx.fill();\n      }\n\n      ctx.font = \"14px sans-serif\";\n      ctx.textAlign = \"left\";\n      ctx.fillStyle = \"#000000\";\n      ctx.fillText(`${this.getPlacement(placement)}:`, topLeftX - 30, topLeftY + 15);\n\n\n      ctx.fillStyle = this.color;\n      ctx.strokeStyle = \"#000000\";\n      ctx.fillRect(topLeftX, topLeftY, this.width, this.height);\n      ctx.strokeRect(topLeftX, topLeftY, this.width, this.height);\n\n      ctx.font = \"14px sans-serif\";\n      ctx.textAlign = \"center\";\n      ctx.fillStyle = \"#000000\";\n      ctx.fillText(`$${this.amount / 1000},000`, topLeftX + 30, 15 + topLeftY);\n    }\n\n    getPlacement(placement){\n      switch (placement) {\n        case 0:\n          return '1st';\n        case 1:\n          return '2nd';\n        case 2:\n          return '3rd';\n      }\n    }\n}\n\nmodule.exports = Bill;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/bill.js\n// module id = 4\n// module chunks = 0","const Dice = require(\"./dice\");\nconst HumanPlayer = require(\"./human_player\");\nconst CPUPlayer = require(\"./cpu_player\");\nconst AIPlayer = require(\"./ai_player\");\n//test\nlet AVATARS = [\n    'avatars/Amy.png',\n    'avatars/Angela.png',\n    'avatars/Anthony.png',\n    'avatars/Antonio.png',\n    'avatars/Chloe.png',\n    'avatars/Curtis.png',\n    'avatars/Hector.png',\n    'avatars/Joshua.png',\n    'avatars/Mary.png',\n    'avatars/Mohammed.png',\n    'avatars/Pamela.png',\n    'avatars/Rhonda.png',\n    'avatars/Terrance.png',\n    'avatars/William.png',\n    'avatars/Yvette.png'\n];\n\nlet NAMES = [\n    'Amy',\n    'Angela',\n    'Anthony',\n    'Antonio',\n    'Chloe',\n    'Curtis',\n    'Hector',\n    'Joshua',\n    'Mary',\n    'Mohammed',\n    'Pamela',\n    'Rhonda',\n    'Terrance',\n    'William',\n    'Yvette'\n];\n\nlet COLORS = [\n    '#ff0000',\n    '#8080ff',\n    '#00ff00',\n    '#ffff00',\n    '#ffa500',\n    '#ff00ff'\n];\n\nclass Player {\n    constructor(playerType, whichPlayer, whichColor, playerId, numPlayers) {\n        this.avatar = AVATARS[whichPlayer];\n        this.name = NAMES[whichPlayer];\n        this.color = COLORS[whichColor];\n        this.moveData = [0,0];\n        if (playerType === \"human\") {\n            this.name = \"You\";\n        }\n        this.playerId = playerId;\n        this.numPlayers = numPlayers;\n        this.playerCoords = this.getPlayerSpace();\n        this.dice = new Dice(8, this.color, this.playerCoords);\n        this.diceArray = this.dice.diceArray;\n        this.money = 0;\n        this.playerType = playerType;\n    }\n\n    getHumanMove(that, player, cb) {\n        let allDice = this.dice;\n        let move;\n        let canvasEl = document.getElementsByTagName(\"canvas\")[0];\n        let onClickFcn = event => {\n          let untriggered = true;\n          let x = event.pageX - canvasEl.offsetLeft;\n          let y = event.pageY - canvasEl.offsetTop;\n          allDice.diceArray.forEach(die => {\n            if( untriggered && x >= die.topLeftX && x <= die.topLeftX + 25\n                && y >= die.topLeftY && y <= die.topLeftY + 25) {\n                  untriggered = false;\n                  move = die.value;\n\n                  let canvasCloneEl = canvasEl.cloneNode(true);\n                  canvasEl.parentNode.replaceChild(canvasCloneEl, canvasEl);\n\n                  let ctx = canvasCloneEl.getContext(\"2d\");\n\n\n                  cb(move, that, player, ctx);\n                  // canvasEl.removeEventListener('click',onClickFcn);\n\n                }\n          });\n        };\n        canvasEl.addEventListener('click', event => onClickFcn(event), false);\n    }\n\n    getCPUMove(that, player, bills, casinos, cb) {\n        let diceValuesArray = this.dice.dieValuesArray();\n        // let idx = Math.floor(Math.random() * diceValuesArray.length);\n        // let move = diceValuesArray[idx];\n        let move = AIPlayer.getMove(bills, casinos, this.playerId, diceValuesArray);\n        cb(move, that, player);\n    }\n\n    getMove(that, player, bills, casinos, cb) {\n        if (this.playerType === \"human\") {\n            // debugger\n            return this.getHumanMove(that, player, cb);\n        } else {\n            return this.getCPUMove(that, player, bills, casinos, cb);\n        }\n    }\n\n    playerRollDice(ctx) {\n        this.dice.rollDice(ctx);\n    }\n\n    playerShowDice(ctx) {\n        this.dice.showDice(ctx);\n    }\n\n    playerShowDiceBases(ctx) {\n        this.dice.showDiceBases(ctx);\n    }\n\n    playerSortDice(ctx) {\n        this.dice.sortDice(ctx);\n    }\n\n    setAmountDice(diceLeft) {\n        this.dice.setAmountDice(diceLeft);\n    }\n\n    getAmountDice() {\n        return this.dice.diceLeft;\n    }\n\n    draw(ctx) {\n        let centerX = (this.playerCoords[0] + this.playerCoords[2]) / 2;\n        let centerY = 0;\n        if (this.playerCoords[3] === 600) {\n            centerY = 528;\n        }\n\n        let img = new Image();\n        img.src = this.avatar;\n        ctx.drawImage(img, centerX, centerY, 50, 72);\n\n        ctx.font = \"20px sans-serif\";\n        ctx.textAlign = \"center\";\n        ctx.fillStyle = \"#000000\";\n        ctx.fillText(`${this.name}`, centerX + 100, centerY + 35);\n        ctx.fillText(`$${this.money / 1000},000`, centerX + 100, centerY + 60);\n\n        ctx.fillStyle = this.color;\n        ctx.beginPath();\n        ctx.arc(centerX - 35, centerY + 35, 20, 0, 2 * Math.PI, true);\n        ctx.fill();\n\n        if(this.moveData[0] > 0){\n          ctx.font = \"20px sans-serif\";\n          ctx.textAlign = \"center\";\n          ctx.fillStyle = \"#000000\";\n          let bidWord = \"bids\";\n          if(this.name === \"You\"){\n            bidWord = \"bid\";\n          }\n          let dieWord = \"dice\";\n          if(this.moveData[1] === 1){\n            dieWord = \"die\";\n          }\n          if(centerY === 0){\n            ctx.fillText(`${this.name} ${bidWord} ${this.moveData[1]} ${dieWord} at casino ${this.moveData[0]}!`, centerX, centerY + 150);\n          } else {\n            ctx.fillText(`${this.name} ${bidWord} ${this.moveData[1]} ${dieWord} at casino ${this.moveData[0]}!`, centerX, centerY - 78);\n          }\n        }\n\n    }\n\n    getPlayerSpace() {\n        switch (this.playerId) {\n            case 0:\n                if (this.numPlayers < 4) {\n                    return ([0, 400, 1070, 600]);\n                } else {\n                    return ([536, 400, 1070, 600]);\n                }\n            case 1:\n                if (this.numPlayers < 3) {\n                    return ([0, 0, 1070, 200]);\n                } else if (this.numPlayers < 4) {\n                    return ([0, 0, 535, 200]);\n                } else {\n                    return ([0, 400, 535, 600]);\n                }\n            case 2:\n                if (this.numPlayers < 4) {\n                    return ([536, 0, 1070, 200]);\n                } else if (this.numPlayers < 5) {\n                    return ([0, 0, 535, 200]);\n                } else {\n                    return ([0, 0, 356, 200]);\n                }\n            case 3:\n                if (this.numPlayers < 5) {\n                    return ([536, 0, 1070, 200]);\n                } else {\n                    return ([357, 0, 713, 200]);\n                }\n            case 4:\n                return ([714, 0, 1070, 200]);\n        }\n    }\n\n}\n\nmodule.exports = Player;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/player.js\n// module id = 5\n// module chunks = 0","const Die = require(\"./die\");\n\nclass Dice {\n    constructor(diceLeft, color, playerCoords) {\n        this.color = color;\n        this.playerCoords = playerCoords;\n        this.diceLeft = diceLeft;\n\n        this.diceLocs = this.diceLocations();\n        this.diceArray = [];\n\n        this.setupDice();\n    }\n\n    setAmountDice(diceLeft) {\n        this.diceLeft = diceLeft;\n    }\n\n    roll() {\n        let ans = Math.ceil(Math.rand() * 6);\n    }\n\n    diceLocations() {\n        let centerX = ((this.playerCoords[2] - this.playerCoords[0]) / 2) + this.playerCoords[0];\n        let centerY = ((this.playerCoords[3] - this.playerCoords[1]) / 2) + this.playerCoords[1];\n        let centerDie = (this.diceLeft - 1) / 2;\n        let diceLocations = [];\n        // debugger\n        for (var i = 0; i < this.diceLeft; i++) {\n            let centerLoc;\n            if (centerY > 300) {\n                centerLoc = [\n                    Math.floor(centerX - 12 + ((i - centerDie) * 37)),\n                    centerY - 25\n                ];\n            } else {\n                centerLoc = [\n                    centerX - 12 + ((i - centerDie) * 37),\n                    centerY\n                ];\n            }\n            diceLocations.push(centerLoc);\n        }\n        return diceLocations;\n    }\n\n    setupDice() {\n        this.diceLocs = this.diceLocations();\n        this.diceArray = this.diceLocs.map(location => new Die(this.color, location[0], location[1], Math.ceil(Math.random() * 6)));\n    }\n\n    rollDice(ctx) {\n        this.diceArray.forEach((die) => {\n            die.rollInternal(Math.ceil(Math.random() * 6));\n            die.renderDieBase(ctx);\n            die.renderDieFace(ctx);\n        });\n    }\n\n    showDice(ctx) {\n        this.diceArray.forEach((die) => {\n            die.renderDieBase(ctx);\n            die.renderDieFace(ctx, true);\n        });\n    }\n\n    showDiceBases(ctx) {\n        this.diceArray.forEach((die) => {\n            die.renderDieBase(ctx);\n        });\n    }\n\n    sortDice(ctx) {\n        let valueArray = this.dieValuesArray().sort();\n        valueArray.forEach((value, idx) => {\n            let die = this.diceArray[idx];\n            die.rollInternal(value);\n            // die.clearDie(ctx);\n            die.renderDieBase(ctx);\n            die.renderDieFace(ctx, true);\n        });\n    }\n\n    dieValuesArray() {\n        return this.diceArray.map(die => die.value);\n    }\n}\n\nmodule.exports = Dice;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/dice.js\n// module id = 6\n// module chunks = 0","const randomAllocationProbabilities = [\n    [1],\n    [\n        0.8333333333333333, 0.16666666666666666\n    ],\n    [\n        0.7175925925925926, 0.2314814814814815, 0.05092592592592593\n    ],\n    [\n        0.6246249142661182, 0.26765046296296313, 0.09082433127572022, 0.016900291495198907\n    ],\n    [\n        0.5497479284947693, 0.28273327554234773, 0.12479787046563078, 0.03654605179596619, 0.006174873701290464\n    ],\n    [\n        0.48864005626357393,\n        0.2855164354271376,\n        0.15015503565828917,\n        0.05770678884921891,\n        0.015521958967025315,\n        0.0024597248347752584\n    ],\n    [\n        0.43814064334040925,\n        0.2810906335062934,\n        0.16790799043801888,\n        0.07742338639459535,\n        0.02741749220659768,\n        0.006965867076680246,\n        0.0010539870373371379\n    ],\n    [\n        0.3959369812189038,\n        0.27256806555053203,\n        0.17941726939596964,\n        0.09455244507402434,\n        0.04026787327676963,\n        0.013489377663121244,\n        0.0032875690668217558,\n        0.00048041875411542135\n    ],\n    [\n        0.36030563533236026,\n        0.26187008607465484,\n        0.1860403149315499,\n        0.10867374514430733,\n        0.05300477512531394,\n        0.021375725659127005,\n        0.006875338146995475,\n        0.0016234123967606596,\n        0.00023096718818415668\n    ]\n];\n\nclass AIPlayer {\n  static getMove(bills, casinos, whichPlayer, diceValuesArray){\n    const diceLeftArr = this.getDiceLeft(casinos);\n    const deficitArrays = this.getDeficits(casinos, whichPlayer, diceLeftArr);\n    const winProbs = this.getWinProbs(deficitArrays, diceValuesArray, diceLeftArr[whichPlayer], diceLeftArr.length);\n    let move = this.getBestMove(winProbs, bills);\n\n\n    return move;\n  }\n\n  static getBestMove(winProbs, bills){\n    let billVals = [];\n    bills.forEach(casinoSlot => {\n      let casinoArr = [];\n      casinoSlot.forEach(bill => {\n        casinoArr.push(bill.amount);\n      });\n      billVals.push(casinoArr);\n    });\n\n    let bestMove = winProbs[0][0];\n    // let bestMoveValue = winProbs[0][1] * billVals[bestMove - 1];\n    let bestMoveValue = 0;\n    winProbs.forEach(winProb => {\n      let value = 0;\n      winProb[1].forEach((chance, idx) => {\n        value += chance * billVals[idx][0];\n      });\n      if(value > bestMoveValue){\n        bestMoveValue = value;\n        bestMove = winProb[0];\n      }\n    });\n    return bestMove;\n  }\n\n  static getWinProbs(deficitArrays, diceValues, diceLeft, numPlayers){\n    const moves = this.unique(diceValues);\n    let solutions = [];\n    for (var i = 0; i < moves.length; i++) {\n      const move = moves[i];\n      let ifThisMoveArr = [];\n      // const deficitArray = deficitArrays[move - 1];\n      const diceSpent = diceValues.filter((x) => x == move).length;\n      const remainingDice = diceLeft - diceSpent;\n      const rands = randomAllocationProbabilities[remainingDice];\n      for (var m = 0; m < deficitArrays.length; m++) {\n        let deficitArray = deficitArrays[m].slice(0);\n\n        for (var j = rands.length - 1; j > -1; j--) {\n          for (var k = deficitArray.length - 1 - diceLeft; k > -1; k--) {\n            let toAdd = j;\n            if(move === m + 1){\n              toAdd += diceSpent;\n            }\n            const probabilityMass = deficitArray[k] * rands[j];\n            deficitArray[k + toAdd] += probabilityMass;\n            deficitArray[k] -= probabilityMass;\n          }\n        }\n        ifThisMoveArr.push(deficitArray);\n      }\n\n      let winsArr = [];\n      ifThisMoveArr.forEach(defArr => {\n        const ties = defArr[8];\n        const wins = defArr.slice(9).reduce( (a,b) => a + b, 0);\n        const winChance = wins + ties / ((numPlayers - 1) * 2);\n        winsArr.push(winChance);\n      });\n\n\n      solutions.push([move, winsArr]);\n    }\n    return solutions;\n  }\n\n  static unique(arr) {\n    var hash = {}, result = [];\n    for ( var i = 0, l = arr.length; i < l; ++i ) {\n        if ( !hash.hasOwnProperty(arr[i]) ) { //it works with objects! in FF, at least\n            hash[ arr[i] ] = true;\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\n\n  static getDeficits(casinos, whichPlayer, diceLeftArr){\n    let dummyCasinosBids = [];\n    casinos.forEach(casino => {\n      dummyCasinosBids.push(casino.diceBids.slice(0));\n    });\n    return dummyCasinosBids.map( bids => {\n      const myDiceBid = bids[whichPlayer];\n      let deficitArr = [0, 0, 0, 0, 0, 0, 0, 0, 0,\n                        0, 0, 0, 0, 0, 0, 0, 0];\n      deficitArr[myDiceBid + 8] = 1;\n      for (var i = 0; i < bids.length; i++) {\n        if(i !== whichPlayer){\n          const cpuBidSoFar = bids[i];\n          const cpuDiceLeft = diceLeftArr[i];\n          const rands = randomAllocationProbabilities[cpuDiceLeft];\n          for (var j = rands.length - 1; j > -1; j--) {\n            const totalDicePlayed = j + cpuBidSoFar;\n            const defArrIdx = 8 - totalDicePlayed + myDiceBid;\n            for (var k = defArrIdx + 1; k < deficitArr.length; k++) {\n              deficitArr[defArrIdx] += deficitArr[k] * rands[j];\n              deficitArr[k] *= (1 - rands[j]);\n            }\n          }\n        }\n      }\n      return deficitArr;\n      // return myDiceBid - otherHighest;\n    });\n  }\n\n  static getDiceLeft(casinos){\n    const numPlayers = Object.keys(casinos[0].diceBids).length;\n    const diceLeftArr = [];\n    for (var i = 0; i < numPlayers; i++) {\n      diceLeftArr.push(8);\n    }\n    for (var i = 0; i < numPlayers; i++) {\n      casinos.forEach(casino => {\n        diceLeftArr[i] -= casino.diceBids[i];\n      });\n    }\n    return diceLeftArr;\n  }\n}\n\nmodule.exports = AIPlayer;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/ai_player.js\n// module id = 9\n// module chunks = 0","class Board {\n  constructor(game, ctx) {\n    this.ctx = ctx;\n    this.game = game;\n  }\n\n  start() {\n    requestAnimationFrame(this.animate.bind(this));\n  }\n\n  animate(time) {\n    this.game.draw();\n    requestAnimationFrame(this.animate.bind(this));\n  }\n}\n\nmodule.exports = Board;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/board.js\n// module id = 10\n// module chunks = 0"],"sourceRoot":""}